name: Selenium CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Print Code Download Path
        run: echo "Code downloaded to ${{ github.workspace }}"

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      # Step 3: Install Chrome and ChromeDriver
      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Fetch Chrome version
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1,2)
      - name: Install ChromeDriver
        run: sudo apt-get install -y chromium-chromedriver

      - name: Set ChromeDriver path
        run: echo "chromedriver_path=$(which chromedriver)" >> src/test/resources/config.properties

      # Step 4: Create config.properties dynamically
      - name: Create config.properties
        run: |
          echo "username=${{ secrets.USERNAME }}" >> src/test/resources/config.properties
          echo "password=${{ secrets.PASSWORD }}" >> src/test/resources/config.properties
          echo "headless_mode=${{ secrets.HEADLESS_MODE }}" >> src/test/resources/config.properties
          echo "test_url=${{ secrets.TEST_URL }}" >> src/test/resources/config.properties
     
      # Step 5: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 6: Install Maven dependencies
      - name: Install Dependencies
        run: mvn install

      # Step 7: Run Selenium tests
      - name: Run Tests
        run: mvn test

      # Step 8: Compress Surefire reports with timestamp
      - name: Compress Surefire reports
        if: always()
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          ZIP_NAME="surefire-reports-$TIMESTAMP.zip"
          zip -r $ZIP_NAME target/surefire-reports
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # Step 9: Upload Surefire reports as artifacts
      - name: Upload Surefire reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
